{"version":3,"sources":["../../modules/legend/index.js"],"names":["colors","domain","range","Legend","config","array","data","isRequired","tags","dataId","string","horizontal","bool","styles","object","props","uid","index","length","color","className","forEach","item","findIndex","tag","push","map","key","backgroundColor","getBackgroundColor","rules","scope","createStyle","createLegend"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;AAKA;;AAGA;;;;AAEA;;;;;;AAEA,IAAMA,SAAS,0CAA+BC,MAA/B,CAAsC,cAAM,CAAN,EAAS,EAAT,CAAtC,EAAoDC,KAApD,EAAf;;IAEqBC,M;;;;wBAEI;AACrB,aAAO;AACLC,gBAAQ,oBAAUC,KADb;AAELC,cAAM,oBAAUD,KAAV,CAAgBE,UAFjB;AAGLC,cAAM,oBAAUH,KAHX;AAILI,gBAAQ,oBAAUC,MAAV,CAAiBH,UAJpB;AAKLI,oBAAY,oBAAUC,IALjB;AAMLC,gBAAQ,oBAAUC;AANb,OAAP;AAQD;;;wBAEyB;AACxB,aAAO;AACLN,cAAM;AADD,OAAP;AAGD;;;AAED,kBAAYO,KAAZ,EAAmB;AAAA;;AAAA,sIACXA,KADW;;AAEjB,UAAKC,GAAL,GAAW,4BAAeD,KAAf,CAAX;AAFiB;AAGlB;;;;uCAEkBE,K,EAAO;AAAA,UAEtBb,MAFsB,GAGpB,KAAKW,KAHe,CAEtBX,MAFsB;;;AAKxB,UAAI,OAAOA,MAAP,KAAkB,WAAtB,EAAmC;AACjC,YAAIA,OAAOc,MAAP,GAAgBD,KAApB,EAA2B;AACzB,iBAAOb,OAAOa,KAAP,EAAcE,KAArB;AACD;AACF;AACD,aAAOnB,OAAOiB,KAAP,CAAP;AACD;;;mCAEc;AAAA;;AAAA,mBAMT,KAAKF,KANI;AAAA,UAEXN,MAFW,UAEXA,MAFW;AAAA,UAGXH,IAHW,UAGXA,IAHW;AAAA,UAIXE,IAJW,UAIXA,IAJW;AAAA,UAKXG,UALW,UAKXA,UALW;;;AAQb,UAAMS,YACHT,UAAD,GACI,YADJ,GAEI,EAHN;;AAKAL,WAAKe,OAAL,CAAa,UAACC,IAAD,EAAU;AACrB,YAAML,QAAQT,KAAKe,SAAL,CAAe,UAACC,GAAD;AAAA,iBAASA,QAAQF,KAAKb,MAAL,CAAjB;AAAA,SAAf,CAAd;AACA,YAAIQ,QAAQ,CAAZ,EAAeT,KAAKiB,IAAL,CAAUH,KAAKb,MAAL,CAAV;AAChB,OAHD;;AAKA,aACE;AAAA;AAAA,UAAI,WAAU,QAAd;AACGD,aAAKkB,GAAL,CAAS,UAACJ,IAAD,EAAOL,KAAP,EAAiB;AACzB,cAAMU,kBAAgBV,KAAtB;AACA,cAAMW,kBAAkB,OAAKC,kBAAL,CAAwBZ,KAAxB,CAAxB;AACA,iBACE;AAAA;AAAA,cAAI,KAAKU,GAAT,EAAc,WAAWP,SAAzB;AACE;AACE,yBAAU,MADZ;AAEE,qBAAO,EAAEQ,gCAAF;AAFT,cADF;AAKGN;AALH,WADF;AASD,SAZA;AADH,OADF;AAiBD;;;kCAEa;AAAA,UAEVT,MAFU,GAGR,KAAKE,KAHG,CAEVF,MAFU;;;AAKZ,UAAMG,MAAM,KAAKA,GAAjB;AACA,UAAMc,QAAQ,sBAAM,EAAN,2BAAyBjB,MAAzB,CAAd;AACA,UAAMkB,+BAA6Bf,GAAnC;;AAEA,aACE;AACE,uBAAee,KADjB;AAEE,eAAOD;AAFT,QADF;AAMD;;;6BAEQ;AACP,UAAMd,MAAM,KAAKA,GAAjB;AACA,UAAMI,kCAAgCJ,GAAtC;AACA,aACE;AAAA;AAAA,UAAK,WAAWI,SAAhB;AACG,aAAKY,WAAL,EADH;AAEG,aAAKC,YAAL;AAFH,OADF;AAMD;;;;;kBApGkB9B,M","file":"index.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Style } from 'radium';\nimport {\n  scaleOrdinal,\n  schemeCategory20,\n  range\n } from 'd3';\nimport {\n  createUniqueID\n} from '../shared';\nimport merge from 'lodash.merge';\n\nimport defaultStyles from './defaultStyles';\n\nconst colors = scaleOrdinal(schemeCategory20).domain(range(0, 20)).range();\n\nexport default class Legend extends PureComponent {\n\n  static get propTypes() {\n    return {\n      config: PropTypes.array,\n      data: PropTypes.array.isRequired,\n      tags: PropTypes.array,\n      dataId: PropTypes.string.isRequired,\n      horizontal: PropTypes.bool,\n      styles: PropTypes.object\n    };\n  }\n\n  static get defaultProps() {\n    return {\n      tags: []\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.uid = createUniqueID(props);\n  }\n\n  getBackgroundColor(index) {\n    const {\n      config\n    } = this.props;\n\n    if (typeof config !== 'undefined') {\n      if (config.length > index) {\n        return config[index].color;\n      }\n    }\n    return colors[index];\n  }\n\n  createLegend() {\n    const {\n      dataId,\n      data,\n      tags,\n      horizontal\n    } = this.props;\n\n    const className =\n      (horizontal)\n        ? 'horizontal'\n        : '';\n\n    data.forEach((item) => {\n      const index = tags.findIndex((tag) => tag === item[dataId]);\n      if (index < 0) tags.push(item[dataId]);\n    });\n\n    return (\n      <ul className=\"legend\">\n        {tags.map((item, index) => {\n          const key = `legend-${index}`;\n          const backgroundColor = this.getBackgroundColor(index);\n          return (\n            <li key={key} className={className}>\n              <span\n                className=\"icon\"\n                style={{ backgroundColor }}\n              />\n              {item}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n\n  createStyle() {\n    const {\n      styles\n    } = this.props;\n\n    const uid = this.uid;\n    const rules = merge({}, defaultStyles, styles);\n    const scope = `.legend-container-${uid}`;\n\n    return (\n      <Style\n        scopeSelector={scope}\n        rules={rules}\n      />\n    );\n  }\n\n  render() {\n    const uid = this.uid;\n    const className = `legend-container-${uid}`;\n    return (\n      <div className={className}>\n        {this.createStyle()}\n        {this.createLegend()}\n      </div>\n    );\n  }\n}\n"]}